services:
  #Radarr - used to find movies automatically
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/radarr/config:/config
      - ${MEDIA_SHARE}:/share #Access to the entire share
    networks:
      - frontend
      - arr_network
    ports:
      - 7878:7878
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.bowline.im`)"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    restart: unless-stopped

  # Another instance of radarr for mma content, lmao
  mmarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: mmarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/mmarr/config:/config
      - ${MEDIA_SHARE}:/share #Access to the entire share
    networks:
      - frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mmarr.rule=Host(`mmarr.bowline.im`)"
      - "traefik.http.services.mmarr.loadbalancer.server.port=7878"
    restart: unless-stopped

  #Sonarr - used to find tv shows automatically
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/sonarr/config:/config
      - ${MEDIA_SHARE}:/share #Access to the entire share
    networks:
      - frontend
      - arr_network
    ports:
      - 8989:8989
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.bowline.im`)"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    restart: unless-stopped

  #Readarr - Used to download books
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/readarr/config:/config
      - ${MEDIA_SHARE}:/share
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.rule=Host(`readarr.bowline.im`)"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"
    networks:
      - frontend
      - arr_network

  #Lidarr - Used to download music
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/lidarr/config:/config
      - ${MEDIA_SHARE}:/share
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.bowline.im`)"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
    networks:
      - frontend
      - arr_network

  # Soularr -  A Python script that connects Lidarr with Soulseek!
  soularr:
    restart: unless-stopped
    container_name: soularr
    hostname: soularr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SCRIPT_INTERVAL=300
    volumes:
      #"You can set /downloads to whatever you want but will then need to change the Slskd download dir in your config file"
      - ${MEDIA_SHARE}:/share
      #Select where you are storing your config file.
      #Leave "/data" since thats where the script expects the config file to be
      - ${BASE_PATH}/soularr/config:/data
      - ./data/soularr.ini:/data/config.ini
    image: mrusse08/soularr:latest

  #Prowlarr - manages your Sonarr, Radarr and download client
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/prowlarr/config:/config
    networks:
      - frontend
      - arr_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.bowline.im`)"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    restart: unless-stopped
    #
  #Flaresolerr - Used as a proxy server to bypass Cloudflare and DDoS-GUARD protection.
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.bowline.im`)"
      - "traefik.http.services.flaresolverr.loadbalancer.server.port=8191"
    restart: unless-stopped
    networks:
      - frontend
      - arr_network

  #Overseer - allows users to request media on their own
  overseerr:
    # Uncomment once this gets merged
    # https://github.com/sct/overseerr/pull/3746
    #image: lscr.io/linuxserver/overseerr:latest
    image: ghcr.io/lenaxia/overseerr-oidc:oidc-support
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/overseer/config:/app/config
      - ${MEDIA_SHARE}:/share #Access to the entire share
    networks:
      - frontend
      - arr_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.bowline.im`)"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"

  #Bazarr - for subtitles. Try to use SRT format if you can rather than PGS due to performance issues
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/bazarr/config:/config
      - ${MEDIA_SHARE}:/share
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.bowline.im`)"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
    networks:
      - frontend
      - arr_network

networks:
  arr_network:
  frontend:
    external: true
