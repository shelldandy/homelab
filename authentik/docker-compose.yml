services:
  postgresql:
    container_name: authentik_postgresql
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    networks:
      - authentik_network

  redis:
    container_name: authentik_redis
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - authentik_network

  server:
    container_name: authentik
    image: ghcr.io/goauthentik/server:2025.4
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL__USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL__USE_SSL}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL__TIMEOUT}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM}
    volumes:
      - ${CONFIG_PATH}/media:/media
      - ${CONFIG_PATH}/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - frontend
      - authentik_network
    ports:
      - 9000:9000
    labels:
      - traefik.enable=true
      - traefik.http.routers.${SUBDOMAIN}.rule=Host(`${SUBDOMAIN}.bowline.im`)
      - traefik.http.services.${SUBDOMAIN}.loadbalancer.server.port=9000

  worker:
    container_name: authentik_worker
    image: ghcr.io/goauthentik/server:2025.4
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${SECRET_KEY}
      AUTHENTIK_ERROR_REPORTING__ENABLED: true
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: ${AUTHENTIK_EMAIL__USE_TLS}
      AUTHENTIK_EMAIL__USE_SSL: ${AUTHENTIK_EMAIL__USE_SSL}
      AUTHENTIK_EMAIL__TIMEOUT: ${AUTHENTIK_EMAIL__TIMEOUT}
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_PATH}/media:/media
      - ${CONFIG_PATH}/certs:/certs
      - ${CONFIG_PATH}/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - authentik_network

  tinyauth:
    container_name: tinyauth
    image: ghcr.io/steveiliop56/tinyauth:v3.2.0
    restart: unless-stopped
    environment:
      - SECRET=${TINYAUTH_SECRET}
      - APP_URL=https://${TINYAUTH_URL}
      - USERS=${TINYAUTH_USERS}
      - GENERIC_CLIENT_ID=${GENERIC_CLIENT_ID}
      - GENERIC_CLIENT_SECRET=${GENERIC_CLIENT_SECRET}
      - GENERIC_AUTH_URL=${GENERIC_AUTH_URL}
      - GENERIC_TOKEN_URL=${GENERIC_TOKEN_URL}
      - GENERIC_SCOPES=${GENERIC_SCOPES}
      - GENERIC_USER_URL=${GENERIC_USER_URL}
      - GENERIC_NAME=${GENERIC_NAME}
      #- LOG_LEVEL=${LOG_LEVEL}
      - COOKIE_SECURE=${COOKIE_SECURE:-true}
      - DISABLE_CONTINUE=${DISABLE_CONTINUE}
      - SESSION_EXPIRY=${SESSION_EXPIRY}
    labels:
      traefik.enable: true
      traefik.http.routers.tinyauth.rule: Host(`${TINYAUTH_URL}`)
      traefik.http.services.tinyauth.loadbalancer.server.port: 3000
      traefik.http.middlewares.tinyauth.forwardauth.address: http://tinyauth:3000/api/auth/traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - frontend
      - authentik_network

volumes:
  database:
    driver: local
  redis:
    driver: local

networks:
  frontend:
    external: true
  authentik_network:
